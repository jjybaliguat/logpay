// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  password     String
  photo        String?
  companyId     String? @db.ObjectId
  company      Company? @relation(fields: [companyId], references: [id])
  role         UserRole  @default(ADMIN)

  gracePeriodInMinutes  Int?  @default(15)
  lateDeducInMinutes    Int?  @default(30)

  devices      Device[]
  employees    Employee[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([name, email])
}

enum UserRole {
  ADMIN
  DEVELOPER
}

model Company {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  logo  String?
  address String
  contact String

  User User[]
}

model Device {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name  String?
  deviceId  String @unique
  isEnrollmentMode  Boolean @default(false)
  userId  String? @db.ObjectId
  user  User? @relation(fields: [userId], references: [id])
  employees Employee[]
  toEnrollId  Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Attendance Attendance[]
}

model Employee {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  employerId    String @db.ObjectId
  employer      User @relation(fields: [employerId], references: [id], onDelete: Cascade)
  empCode       String   @unique // Unique employee code
  fullName      String?
  email         String   @unique
  phone         String?
  department    String?
  position      String
  dailyRate     Int
  hireDate      DateTime @default(now())
  tinNumber     String?
  sssNumber     String?

  isActive      Boolean  @default(true)
  fingerprintId Int      // Numeric fingerprint ID for sensor
  fingerEnrolled  Boolean? @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Attendance Attendance[]
  deviceId    String?
  device  Device? @relation(fields: [deviceId], references: [deviceId])
}

model Attendance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId    String @db.ObjectId
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  fingerprintId Int      // Numeric fingerprint ID for tracking
  timeIn       DateTime @default(now()) // Check-in timestamp
  timeOut      DateTime? // Nullable check-out timestamp
  status        AttendanceStatus   @default(PRESENT) // PRESENT, LATE, ABSENT
  verifiedBy    String   @default("FINGERPRINT") // Always "FINGERPRINT"
  deviceId      String
  device        Device  @relation(fields: [deviceId], references: [deviceId])

  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
}


